<% const vector_dim_names = ['x', 'y', 'z', 'w'].slice(0, locals.size); %>
<% const vector_color_names = ['r', 'g', 'b', 'a'].slice(0, locals.size); %>
export class Vector<%= locals.size %>D {
    constructor(...args) {
        <% if (locals.size < 4) { _%>
        if (args.length === 1 && args[0] instanceof Vector<%= locals.size + 1 %>D) {
            this[internal] = Object.seal([
                <% for (let i = 0; i < locals.size; ++i) { _%>
                args[0][internal][<%= i -%>] / args[0][internal][<%= locals.size -%>]<%_ if (i < locals.size - 1) { _%>,<%_ } %>
                <%_ } _%>
            ]);
            return;
        }
        <%_ } _%>
        let items = recursive_items_from_args(<%= locals.size %>, args);
        if (items.length === 0) {
            items = <%= [0, 0, 0, 1].slice(0, locals.size) %>;
        } else if (items.length === 1) {
            items = (new Array(<%= locals.size %>).fill(items[0]));
        } else if (items.length !== <%= locals.size %>) {
            throw new TypeError(`Invalid number of arguments: expected 0, 1, or <%= locals.size %>, got ${items.length}`);
        }
        this[internal] = Object.seal(items.map(item => +item));
    }

    static from(array, offset = 0) {
        return vector_create_from_array(this, <%= locals.size %>, array, offset);
    }

    static using(array, offset = 0) {
        return vector_create_using_array(this, <%= locals.size %>, array, offset);
    }

    static piecewise(...items) {
        return vector_create_piecewise(this, <%= locals.size %>, items);
    }

    * [Symbol.iterator]() {
        yield * this[internal];
    }

    set(...args) {
        const items = recursive_items_from_args(<%= locals.size -%>, args);
        <% for (let i = 0; i < locals.size; ++i) { _%>
        this[internal][<%= i -%>] = +items[<%= i -%>];
        <%_ } _%>
        return this;
    }

    into(target) {
        if (!(target instanceof Vector<%= locals.size %>D)) {
            throw new TypeError(`Invalid arguments`);
        }
        return target.set(this);
    }

    <% for (const naming_scheme of [vector_dim_names, vector_color_names]) {
        const index_names = Object.create(null);
        for (let i = 0; i < naming_scheme.length; ++i) {
            index_names[naming_scheme[i]] = i;
        }
        for (let name_size = 1; name_size <= 4; ++name_size) {
            for (const name of locals.permutateNameFrom(naming_scheme, name_size)) {
                const name_list = name.split('');
                const index_list = name_list.map(n => index_names[n]); %>
    get <%- name -%>() {
        <%_ if (index_list.length === 1) { _%>
        return this[internal][<%= index_list[0] -%>];
        <%_ } else { _%>
        return new Vector<%= index_list.length -%>D(<%- index_list.map(n => `this[internal][${n}]`).join(', ') -%>);
        <%_ } _%>
    }

    set <%- name -%>(<%_ if (index_list.length === 1) { _%>value<%_ } else { _%>[...items]<%_ } _%>) {
        <%_ if (index_list.length === 1) { _%>
        this[internal][<%= index_list[0] -%>] = +value;
        <%_ } else { _%>
            <%_ for (let i = 0; i < index_list.length; ++i) { _%>
        this[internal][<%= index_list[i] -%>] = +items[<%= i -%>];
            <%_ } _%>
        <%_ } _%>
    }
    <% }}} -%>
}

const Vector<%= locals.size %>D_polymorphism = Vector<%= locals.size %>D.prototype[polymorphism] = Symbol(`Vector<%= locals.size %>D.polymorphism`);

Object.defineProperties(Vector<%= locals.size %>D.prototype, {
    size: {
        value: <%= locals.size %>
    }
});

Vector[<%= locals.size %>] = Vector<%= locals.size %>D;
