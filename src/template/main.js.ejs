/* eslint-disable function-call-argument-newline */
/* eslint-disable camelcase */
/* eslint-disable no-extend-native */
import * as limits from './limits.js';
export { limits };
export * from './power.js';

const polymorphism = Symbol('polymorphism');
const Number_polymorphism = Number.prototype[polymorphism] = Symbol('Number.polymorphism');
const implementation = Object.create(null);
implementation[Number_polymorphism] = Object.create(null);
implementation[Number_polymorphism][Number_polymorphism] = Object.create(null);
const internal = Symbol('internal');
export const Vector = Object.create(null);
export const Matrix = Object.create(null);

<% for (let size = 2; size <= 4; ++size) { -%>
Matrix[<%= size %>] = Object.create(null);
<% } %>

<% for (let size = 2; size <= 4; ++size) { -%><%-
    await include('vector.js.ejs', { size })
%>
<% } %>

<% for (let rows = 2; rows <= 4; ++rows) {
    for (let columns = 2; columns <= 4; ++columns) { %><%-
        await include('matrix.js.ejs', { rows, columns })
%>
<% }} %>
<%- await include('impl-vector.js.ejs') -%>
<%- await include('impl-matrix.js.ejs') -%>

<%- await include('implementation.js.ejs') -%>

function throw_type_error(name, ...args) {
    throw new TypeError(`"${name}": no matching overloaded function found, capable of accepting [${args.map(get_type).join(', ')}]`);
}

function get_type(value) {
    if (value === void 0) {
        return 'undefined';
    }
    if (value === null) {
        return 'null';
    }
    if (value !== Object(value)) {
        return typeof value;
    }
    if (typeof value === 'function') {
        return 'function';
    }
    const proto = Object.getPrototypeOf(value);
    let has_object_proto = false;
    for (let p = proto; p != null; p = Object.getPrototypeOf(p)) {
        if (p === Object.prototype) {
            has_object_proto = true;
            break;
        }
    }
    if (has_object_proto) {
        const constructor = proto.constructor;
        if (typeof constructor === 'function') {
            const name = constructor.name;
            if (typeof name === 'string' && name.trim().length > 0) {
                return `#<${name}>`;
            }
        }
    }
    return '#<Object>';
}
