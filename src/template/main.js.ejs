/* eslint-disable function-call-argument-newline */
/* eslint-disable camelcase */
/* eslint-disable no-extend-native */
import * as limits from './limits.js';
export { limits };
export * from './power.js';

const polymorphism = Symbol('polymorphism');
const Number_polymorphism = Number.prototype[polymorphism] = Symbol('Number.polymorphism');
const implementation = Object.create(null);
implementation[Number_polymorphism] = Object.create(null);
implementation[Number_polymorphism][Number_polymorphism] = Object.create(null);
const internal = Symbol('internal');
const inspect = Symbol.for('nodejs.util.inspect.custom');
export const Vector = Object.create(null);
export const Matrix = Object.create(null);

<% for (let size = 2; size <= 4; ++size) { -%>
Matrix[<%= size %>] = Object.create(null);
<% } %>

<% for (let size = 2; size <= 4; ++size) { -%><%-
    await include('vector.js.ejs', { size })
%>
<% } %>

<% for (let rows = 2; rows <= 4; ++rows) {
    for (let columns = 2; columns <= 4; ++columns) { %><%-
        await include('matrix.js.ejs', { rows, columns })
%>
<% }} %>
<%- await include('impl-vector.js.ejs') -%>
<%- await include('impl-matrix.js.ejs') -%>

<%- await include('implementation.js.ejs') -%>

function throw_type_error(name, ...args) {
    throw new TypeError(`"${name}": no matching overloaded function found, capable of accepting [${args.map(get_type).join(', ')}]`);
}

function get_type(value) {
    if (value === void 0) {
        return '[undefined]';
    }
    if (value === null) {
        return '[null]';
    }
    if (value !== Object(value)) {
        return `[${typeof value}]`;
    }
    if (typeof value === 'function') {
        const name = value.name;
        if (typeof name === 'string' && name.length > 0) {
            if (name.length > 256) {
                return `[function ${name.substring(0, 256)}...]`;
            } else {
                return `[function ${name}];`;
            }
        }
        return '[function]';
    }
    return Object.prototype.toString.call(value);
}

export function radians_from(value) {
    return value / 180 * Math.PI;
}

export function degrees_from(value) {
    return value / Math.PI * 180;
}

export function hg_expand(vector, value = 1) {
    return implementation[vector[polymorphism]][value[polymorphism]].hg_expand(vector, value);
}

export function hg_collapse(vector, divide = true) {
    return implementation[vector[polymorphism]].hg_collapse(vector, divide);
}

function prepareNumberForInspect(number) {
    if (Number.isNaN(number)) {
        return 'NaN';
    } else if (number === Number.POSITIVE_INFINITY) {
        return '+Infinity';
    } else if (number === Number.NEGATIVE_INFINITY) {
        return '-Infinity';
    } else if (number >= +0.0) {
        return `+${number.toFixed(6)}`;
    } else if (Object.is(number, -0.0)) {
        return `-${number.toFixed(6)}`;
    } else {
        return number.toFixed(6);
    }
}

function expandStringToWidth(string, width, fill) {
    const repeat = Math.ceil((width - string.length) / fill.length);
    if (repeat <= 0) {
        return string;
    }
    return fill.repeat(repeat) + string;
}
