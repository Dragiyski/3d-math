<%_ const fn_names_1_arg = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'log', 'log10', 'log1p', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'] _%> 
<% for (let size = 2; size <= 4; ++size) { -%>
    implementation[Vector<%= size -%>D.prototype[polymorphism]].neg = function neg(x) {
        return new Vector<%= size -%>D(<%- new Array(size).fill(0).map((_, i) => `-x[internal][${i}]`).join(', ') -%>);
    };
    <% for (const [name, op] of Object.entries({add: '+', sub: '-', mul: '*', div: '/', mod: '%'})) { _%>
        implementation[Vector<%= size -%>D.prototype[polymorphism]][Vector<%= size -%>D.prototype[polymorphism]].<%- name %> = function <%- name %>(x, y) {
            return new Vector<%= size -%>D(
                <% for (let i = 0; i < size; ++i) { _%>
                x[internal][<%= i -%>] <%- op -%> y[internal][<%= i -%>]<%_ if (i < size - 1) { _%>,<%_ } %>
                <%_ } -%>
            );
        };
        implementation[Number.prototype[polymorphism]][Vector<%= size -%>D.prototype[polymorphism]].<%- name %> = function <%- name %>(n, x) {
            return new Vector<%= size -%>D(
                <% for (let i = 0; i < size; ++i) { _%>
                n <%- op -%> x[internal][<%= i -%>]<%_ if (i < size - 1) { _%>,<%_ } %>
                <%_ } -%>
            );
        };
        implementation[Vector<%= size -%>D.prototype[polymorphism]][Number.prototype[polymorphism]].<%- name %> = function <%- name %>(x, n) {
            return new Vector<%= size -%>D(
                <% for (let i = 0; i < size; ++i) { _%>
                x[internal][<%= i -%>] <%- op -%> n<%_ if (i < size - 1) { _%>,<%_ } %>
                <%_ } -%>
            );
        };
    <%_ } %>
    <% for (const name of fn_names_1_arg) { _%>
        implementation[Vector<%= size -%>D.prototype[polymorphism]].<%- name %> = function <%- name %>(x) {
            return new Vector<%= size -%>D(<%- new Array(size).fill(0).map((_, i) => `Math.${name}(x[internal][${i}])`).join(', ') -%>);
        };
    <%_ } %>
<% } -%>